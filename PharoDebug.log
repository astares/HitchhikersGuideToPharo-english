THERE_BE_DRAGONS_HERE
Error: No configuration named "LaTeX whole book"
22 February 2014 1:49:16.292504 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 Dec 26 2013
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 Dec 26 2013
https://github.com/pharo-project/pharo-vm.git Commit: e698e14f38003258fa49506b14307d83863a5ac1 Date: 2013-12-16 06:32:59 -0800 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14780

Image: Pharo3.0 [Latest update: #30778]

PRCommandLineHandler(BasicCommandLineHandler)>>handleExit:for:
	Receiver: a PRCommandLineHandler
	Arguments and temporary variables: 
		exit: 	Exit: No configuration named "LaTeX whole book" 1
		aCommandLinehandler: 	PRExportCommandLineHandler
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a Session
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


[ :exit | ^ self handleExit: exit for: aCommandLinehandler ] in PRCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
	Receiver: a PRCommandLineHandler
	Arguments and temporary variables: 
		aCommandLinehandler: 	PRExportCommandLineHandler
		exit: 	Exit: No configuration named "LaTeX whole book" 1
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a Session
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


BlockClosure>>cull:
	Receiver: [ :exit | ^ self handleExit: exit for: aCommandLinehandler ]
	Arguments and temporary variables: 
		anArg: 	Exit: No configuration named "LaTeX whole book" 1
	Receiver's instance variables: 
		outerContext: 	PRCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand...etc...
		startpc: 	44
		numArgs: 	1


[ self exceptionHandlerBlock cull: exception ] in MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	Exit: No configuration named "LaTeX whole book" 1
		value: 	nil
	Receiver's instance variables: 
		sender: 	PRCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
		pc: 	17
		stackp: 	3
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ aCommandLinehandler activateWith: commandLine ]


BlockClosure>>ensure:
	Receiver: [ self exceptionHandlerBlock cull: exception ]
	Arguments and temporary variables: 
		aBlock: 	[ self exceptionHandlerIsActive: true ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MethodContext(ContextPart)>>handleSignal:
		startpc: 	99
		numArgs: 	0


MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	Exit: No configuration named "LaTeX whole book" 1
		value: 	nil
	Receiver's instance variables: 
		sender: 	PRCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
		pc: 	17
		stackp: 	3
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ aCommandLinehandler activateWith: commandLine ]


MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	Exit: No configuration named "LaTeX whole book" 1
		value: 	nil
	Receiver's instance variables: 
		sender: 	PRExportCommandLineHandler>>export
		pc: 	17
		stackp: 	3
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ subconfName ifNil: [ configuration export ] ifNotNil: [ configurati...etc...


Exit(Exception)>>signal
	Receiver: Exit: No configuration named "LaTeX whole book" 1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'No configuration named "LaTeX whole book"'
		tag: 	nil
		signaler: 	a PRExportCommandLineHandler
		signalContext: 	Exit(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		status: 	1


Exit(Exception)>>signal:
	Receiver: Exit: No configuration named "LaTeX whole book" 1
	Arguments and temporary variables: 
		signalerText: 	'No configuration named "LaTeX whole book"'
	Receiver's instance variables: 
		messageText: 	'No configuration named "LaTeX whole book"'
		tag: 	nil
		signaler: 	a PRExportCommandLineHandler
		signalContext: 	Exit(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		status: 	1


Exit class>>signalFailure:
	Receiver: Exit
	Arguments and temporary variables: 
		aMessage: 	'No configuration named "LaTeX whole book"'
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->Exit>>#defaultAction #isSuccess-...etc...
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#('status')
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Exit
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Exceptions'
		traitComposition: 	{}
		localSelectors: 	nil


PRExportCommandLineHandler(CommandLineHandler)>>exitFailure:
	Receiver: a PRExportCommandLineHandler
	Arguments and temporary variables: 
		aMessage: 	'No configuration named "LaTeX whole book"'
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a Session
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver
		baseDirectory: 	File @ /home/astares/hitchhikersGuideToPharo/HitchhikersGuideToP...etc...
		configuration: 	a PRExportConfiguration[400818176]
		subconfName: 	'LaTeX whole book'


[ :error | self exitFailure: error messageText ] in PRExportCommandLineHandler>>export
	Receiver: a PRExportCommandLineHandler
	Arguments and temporary variables: 
		error: 	PRConfigurationError: No configuration named "LaTeX whole book"
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a Session
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver
		baseDirectory: 	File @ /home/astares/hitchhikersGuideToPharo/HitchhikersGuideToP...etc...
		configuration: 	a PRExportConfiguration[400818176]
		subconfName: 	'LaTeX whole book'


BlockClosure>>cull:
	Receiver: [ :error | self exitFailure: error messageText ]
	Arguments and temporary variables: 
		anArg: 	PRConfigurationError: No configuration named "LaTeX whole book"
	Receiver's instance variables: 
		outerContext: 	PRExportCommandLineHandler>>export
		startpc: 	71
		numArgs: 	1


[ self exceptionHandlerBlock cull: exception ] in MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	PRConfigurationError: No configuration named "LaTeX whole book"
		value: 	nil
	Receiver's instance variables: 
		sender: 	PRExportCommandLineHandler>>export
		pc: 	17
		stackp: 	3
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ subconfName ifNil: [ configuration export ] ifNotNil: [ configurati...etc...


BlockClosure>>ensure:
	Receiver: [ self exceptionHandlerBlock cull: exception ]
	Arguments and temporary variables: 
		aBlock: 	[ self exceptionHandlerIsActive: true ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MethodContext(ContextPart)>>handleSignal:
		startpc: 	99
		numArgs: 	0


MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	PRConfigurationError: No configuration named "LaTeX whole book"
		value: 	nil
	Receiver's instance variables: 
		sender: 	PRExportCommandLineHandler>>export
		pc: 	17
		stackp: 	3
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ subconfName ifNil: [ configuration export ] ifNotNil: [ configurati...etc...


PRConfigurationError(Exception)>>signal
	Receiver: PRConfigurationError: No configuration named "LaTeX whole book"
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'No configuration named "LaTeX whole book"'
		tag: 	nil
		signaler: 	a PRExportConfiguration[736100352]
		signalContext: 	PRConfigurationError(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil


PRConfigurationError(Exception)>>signal:
	Receiver: PRConfigurationError: No configuration named "LaTeX whole book"
	Arguments and temporary variables: 
		signalerText: 	'No configuration named "LaTeX whole book"'
	Receiver's instance variables: 
		messageText: 	'No configuration named "LaTeX whole book"'
		tag: 	nil
		signaler: 	a PRExportConfiguration[736100352]
		signalContext: 	PRConfigurationError(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil


PRConfigurationError class(Exception class)>>signal:
	Receiver: PRConfigurationError
	Arguments and temporary variables: 
		message: 	'No configuration named "LaTeX whole book"'
	Receiver's instance variables: 
		superclass: 	PRError
		methodDict: 	a MethodDictionary()
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PRConfigurationError
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Pillar-ExporterCore'
		traitComposition: 	{}
		localSelectors: 	nil


PRExportConfiguration>>error:
	Receiver: a PRExportConfiguration[736100352]
	Arguments and temporary variables: 
		aString: 	'No configuration named "LaTeX whole book"'
	Receiver's instance variables: 
		properties: 	a Dictionary('baseDirectory'->memory:/// 'configurations'->a Dictio...etc...
		parent: 	a PRExportConfiguration[400818176]


[ 
self configurations do: [ :conf | (conf subConfigurationNamed: aString) ifNotNil: [ :subsub | ^ subsub ] ].
self error: 'No configuration named "' , aString , '"' ] in PRExportConfiguration>>subConfigurationNamed:
	Receiver: a PRExportConfiguration[736100352]
	Arguments and temporary variables: 
		aString: 	'LaTeX whole book'
	Receiver's instance variables: 
		properties: 	a Dictionary('baseDirectory'->memory:/// 'configurations'->a Dictio...etc...
		parent: 	a PRExportConfiguration[400818176]


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		key: 	'LaTeX whole book'
		aBlock: 	[ 
self configurations do: [ :conf | (conf subConfigurationNamed: aStri...etc...
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


PRExportConfiguration>>subConfigurationNamed:
	Receiver: a PRExportConfiguration[736100352]
	Arguments and temporary variables: 
		aString: 	'LaTeX whole book'
	Receiver's instance variables: 
		properties: 	a Dictionary('baseDirectory'->memory:/// 'configurations'->a Dictio...etc...
		parent: 	a PRExportConfiguration[400818176]


[ :conf | (conf subConfigurationNamed: aString) ifNotNil: [ :subsub | ^ subsub ] ] in [ 
self configurations do: [ :conf | (conf subConfigurationNamed: aString) ifNotNil: [ :subsub | ^ subsub ] ].
self error: 'No configuration named "' , aString , '"' ] in PRExportConfiguration>>subConfigurationNamed:
	Receiver: a PRExportConfiguration[400818176]
	Arguments and temporary variables: 
		aString: 	'LaTeX whole book'
		conf: 	a PRExportConfiguration[736100352]
	Receiver's instance variables: 
		properties: 	a Dictionary()
		parent: 	nil


Dictionary>>valuesDo:
	Receiver: a Dictionary(#githubmarkdown->a PRExportConfiguration[988020736] #html->a PRExportConfigur...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :conf | (conf subConfigurationNamed: aString) ifNotNil: [ :subsub | ^...etc...
		eachIndex: 	3
		eachAssociation: 	#latex->a PRExportConfiguration[736100352]
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(nil nil #latex->a PRExportConfiguration[736100352] nil #html->a...etc...


Dictionary>>do:
	Receiver: a Dictionary(#githubmarkdown->a PRExportConfiguration[988020736] #html->a PRExportConfigur...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :conf | (conf subConfigurationNamed: aString) ifNotNil: [ :subsub | ^...etc...
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(nil nil #latex->a PRExportConfiguration[736100352] nil #html->a...etc...


[ 
self configurations do: [ :conf | (conf subConfigurationNamed: aString) ifNotNil: [ :subsub | ^ subsub ] ].
self error: 'No configuration named "' , aString , '"' ] in PRExportConfiguration>>subConfigurationNamed:
	Receiver: a PRExportConfiguration[400818176]
	Arguments and temporary variables: 
		aString: 	'LaTeX whole book'
	Receiver's instance variables: 
		properties: 	a Dictionary()
		parent: 	nil


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary(#githubmarkdown->a PRExportConfiguration[965738496] #html->a PRExportConfigur...etc...
	Arguments and temporary variables: 
		key: 	'LaTeX whole book'
		aBlock: 	[ 
self configurations do: [ :conf | (conf subConfigurationNamed: aStri...etc...
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(nil nil #latex->a PRExportConfiguration[786169856] nil #html->a...etc...


PRExportConfiguration>>subConfigurationNamed:
	Receiver: a PRExportConfiguration[400818176]
	Arguments and temporary variables: 
		aString: 	'LaTeX whole book'
	Receiver's instance variables: 
		properties: 	a Dictionary()
		parent: 	nil


PRExportConfiguration>>export:
	Receiver: a PRExportConfiguration[400818176]
	Arguments and temporary variables: 
		configurationName: 	'LaTeX whole book'
	Receiver's instance variables: 
		properties: 	a Dictionary()
		parent: 	nil


[ subconfName ifNil: [ configuration export ] ifNotNil: [ configuration export: subconfName ] ] in PRExportCommandLineHandler>>export
	Receiver: a PRExportCommandLineHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a Session
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver
		baseDirectory: 	File @ /home/astares/hitchhikersGuideToPharo/HitchhikersGuideToP...etc...
		configuration: 	a PRExportConfiguration[400818176]
		subconfName: 	'LaTeX whole book'


BlockClosure>>on:do:
	Receiver: [ subconfName ifNil: [ configuration export ] ifNotNil: [ configuration export: subconfNam...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :error | self exitFailure: error messageText ]
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PRExportCommandLineHandler>>export
		startpc: 	53
		numArgs: 	0


PRExportCommandLineHandler>>export
	Receiver: a PRExportCommandLineHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a Session
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver
		baseDirectory: 	File @ /home/astares/hitchhikersGuideToPharo/HitchhikersGuideToP...etc...
		configuration: 	a PRExportConfiguration[400818176]
		subconfName: 	'LaTeX whole book'


PRExportCommandLineHandler>>activate
	Receiver: a PRExportCommandLineHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a Session
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver
		baseDirectory: 	File @ /home/astares/hitchhikersGuideToPharo/HitchhikersGuideToP...etc...
		configuration: 	a PRExportConfiguration[400818176]
		subconfName: 	'LaTeX whole book'


PRExportCommandLineHandler class(CommandLineHandler class)>>activateWith:
	Receiver: PRExportCommandLineHandler
	Arguments and temporary variables: 
		aCommandLine: 	a CommandLineArguments
	Receiver's instance variables: 
		superclass: 	PRWithConfigurationCommandLineHandler
		methodDict: 	a MethodDictionary(#activate->PRExportCommandLineHandler>>#activate...etc...
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PRExportCommandLineHandler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Pillar-Cli'
		traitComposition: 	{}
		localSelectors: 	nil


[ aCommandLinehandler activateWith: commandLine ] in PRCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
	Receiver: a PRCommandLineHandler
	Arguments and temporary variables: 
		aCommandLinehandler: 	PRExportCommandLineHandler
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a Session
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


BlockClosure>>on:do:
	Receiver: [ aCommandLinehandler activateWith: commandLine ]
	Arguments and temporary variables: 
		exception: 	Exit
		handlerAction: 	[ :exit | ^ self handleExit: exit for: aCommandLinehandler ]
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PRCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand...etc...
		startpc: 	34
		numArgs: 	0


PRCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
	Receiver: a PRCommandLineHandler
	Arguments and temporary variables: 
		aCommandLinehandler: 	PRExportCommandLineHandler
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a Session
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


PRCommandLineHandler(BasicCommandLineHandler)>>handleSubcommand
	Receiver: a PRCommandLineHandler
	Arguments and temporary variables: 
		handlers: 	an OrderedCollection(PRExportCommandLineHandler)
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a Session
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver



--- The full stack ---
PRCommandLineHandler(BasicCommandLineHandler)>>handleExit:for:
[ :exit | ^ self handleExit: exit for: aCommandLinehandler ] in PRCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
BlockClosure>>cull:
[ self exceptionHandlerBlock cull: exception ] in MethodContext(ContextPart)>>handleSignal:
BlockClosure>>ensure:
MethodContext(ContextPart)>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
Exit(Exception)>>signal
Exit(Exception)>>signal:
Exit class>>signalFailure:
PRExportCommandLineHandler(CommandLineHandler)>>exitFailure:
[ :error | self exitFailure: error messageText ] in PRExportCommandLineHandler>>export
BlockClosure>>cull:
[ self exceptionHandlerBlock cull: exception ] in MethodContext(ContextPart)>>handleSignal:
BlockClosure>>ensure:
MethodContext(ContextPart)>>handleSignal:
PRConfigurationError(Exception)>>signal
PRConfigurationError(Exception)>>signal:
PRConfigurationError class(Exception class)>>signal:
PRExportConfiguration>>error:
[ 
self configurations do: [ :conf | (conf subConfigurationNamed: aString) ifNotNil: [ :subsub | ^ subsub ] ].
self error: 'No configuration named "' , aString , '"' ] in PRExportConfiguration>>subConfigurationNamed:
Dictionary>>at:ifAbsent:
PRExportConfiguration>>subConfigurationNamed:
[ :conf | (conf subConfigurationNamed: aString) ifNotNil: [ :subsub | ^ subsub ] ] in [ 
self configurations do: [ :conf | (conf subConfigurationNamed: aString) ifNotNil: [ :subsub | ^ subsub ] ].
self error: 'No configuration named "' , aString , '"' ] in PRExportConfiguration>>subConfigurationNamed:
Dictionary>>valuesDo:
Dictionary>>do:
[ 
self configurations do: [ :conf | (conf subConfigurationNamed: aString) ifNotNil: [ :subsub | ^ subsub ] ].
self error: 'No configuration named "' , aString , '"' ] in PRExportConfiguration>>subConfigurationNamed:
Dictionary>>at:ifAbsent:
PRExportConfiguration>>subConfigurationNamed:
PRExportConfiguration>>export:
[ subconfName ifNil: [ configuration export ] ifNotNil: [ configuration export: subconfName ] ] in PRExportCommandLineHandler>>export
BlockClosure>>on:do:
PRExportCommandLineHandler>>export
PRExportCommandLineHandler>>activate
PRExportCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ aCommandLinehandler activateWith: commandLine ] in PRCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
BlockClosure>>on:do:
PRCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
PRCommandLineHandler(BasicCommandLineHandler)>>handleSubcommand
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PRCommandLineHandler(BasicCommandLineHandler)>>handleArgument:
[ self handleArgument: (self arguments ifEmpty: [ '' ] ifNotEmpty: [ :arguments | arguments first ]) ] in PRCommandLineHandler(BasicCommandLineHandler)>>activate
BlockClosure>>on:do:
PRCommandLineHandler(BasicCommandLineHandler)>>activate
PRCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ aCommandLinehandler activateWith: commandLine ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
PharoCommandLineHandler(BasicCommandLineHandler)>>handleSubcommand
PharoCommandLineHandler(BasicCommandLineHandler)>>handleArgument:
[ self handleArgument: (self arguments ifEmpty: [ '' ] ifNotEmpty: [ :arguments | arguments first ]) ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activate
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activate
PharoCommandLineHandler>>activate
PharoCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ super activateWith: aCommandLine ] in PharoCommandLineHandler class>>activateWith:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
22 February 2014 1:49:48.550507 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 Dec 26 2013
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 Dec 26 2013
https://github.com/pharo-project/pharo-vm.git Commit: e698e14f38003258fa49506b14307d83863a5ac1 Date: 2013-12-16 06:32:59 -0800 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14780

Image: Pharo3.0 [Latest update: #30778]

PRCommandLineHandler(BasicCommandLineHandler)>>DoItIn:
	Receiver: a PRCommandLineHandler
	Arguments and temporary variables: 
		ThisContext: 	[ :exit | ^ self handleExit: exit for: aCommandLinehandler ] in PR...etc...
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a Session
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'aCommandLinehandler halt activateWith: commandLine '
		itsSelection: 	a Text for 'aCommandLinehandler halt activateWith: commandLine '
		itsSelectionString: 	'aCommandLinehandler halt activateWith: commandLine '
	Receiver's instance variables: 
		ast: 	DoItIn: ThisContext
	^ (ThisContext namedTempAt: 1) halt activateWith: com...etc...
		source: 	a ReadStream
		context: 	[ :exit | ^ self handleExit: exit for: aCommandLinehandler ] in PRComm...etc...
		receiver: 	a PRCommandLineHandler
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	a PRCommandLineHandler
		ctxt: 	[ :exit | ^ self handleExit: exit for: aCommandLinehandler ] in PRCommand...etc...
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(740556800)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(740556800)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(740556800)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(740556800)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		aBoolean: 	false
		return: 	[ :val | ^ val ]
		asciiValue: 	101
		actions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop: #...etc...
		action: 	#doIt:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(740556800)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		return: 	[ :val | ^ val ]
		asciiValue: 	100
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(740556800)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		char: 	nil
		return: 	[ :val | ^ val ]
		keyEvents: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(740556800)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


[ self dispatchOn: aKeyboardEvent ] in SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(740556800)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ self dispatchOn: aKeyboardEvent ]
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(740556800)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		anAction: 	[ self dispatchOn: aKeyboardEvent ]
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(740556800)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(740556800)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


[ editor keystroke: evt ] in TextMorphForEditView(TextMorph)>>basicKeyStroke:
	Receiver: a TextMorphForEditView(740556800)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (635@82)
		owner: 	a TransformMorph(866385920)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (635@82)
		color: 	NewColor black
		extension: 	a MorphExtension (783286272) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	NewColor black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'activateSubCommand: aCommandLinehandler
	[ aCommandLinehandle...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	NewColor black
		editView: 	a PluggableTextMorph(357040128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(740556800)
	Arguments and temporary variables: 
		interactionBlock: 	[ editor keystroke: evt ]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a Paragraph
		oldText: 	a Text for 'activateSubCommand: aCommandLinehandler
	[ aCommandLinehan...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (635@82)
		owner: 	a TransformMorph(866385920)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (635@82)
		color: 	NewColor black
		extension: 	a MorphExtension (783286272) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	NewColor black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'activateSubCommand: aCommandLinehandler
	[ aCommandLinehandle...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	NewColor black
		editView: 	a PluggableTextMorph(357040128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(740556800)
	Arguments and temporary variables: 
		interActionBlock: 	[ editor keystroke: evt ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (635@82)
		owner: 	a TransformMorph(866385920)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (635@82)
		color: 	NewColor black
		extension: 	a MorphExtension (783286272) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	NewColor black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'activateSubCommand: aCommandLinehandler
	[ aCommandLinehandle...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	NewColor black
		editView: 	a PluggableTextMorph(357040128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>basicKeyStroke:
	Receiver: a TextMorphForEditView(740556800)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (635@82)
		owner: 	a TransformMorph(866385920)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (635@82)
		color: 	NewColor black
		extension: 	a MorphExtension (783286272) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	NewColor black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'activateSubCommand: aCommandLinehandler
	[ aCommandLinehandle...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	NewColor black
		editView: 	a PluggableTextMorph(357040128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ self basicKeyStroke: evt ] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(740556800)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (635@82)
		owner: 	a TransformMorph(866385920)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (635@82)
		color: 	NewColor black
		extension: 	a MorphExtension (783286272) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	NewColor black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'activateSubCommand: aCommandLinehandler
	[ aCommandLinehandle...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	NewColor black
		editView: 	a PluggableTextMorph(357040128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


NECController class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: NECController
	Arguments and temporary variables: 
		aBlock: 	[ self basicKeyStroke: evt ]
		aTextMorph: 	a TextMorphForEditView(740556800)
		evt: 	[keystroke '<Cmd-d>']
		editor: 	a SmalltalkEditor
		stringHolder: 	a MorphicTextAdapter
		completionAllowed: 	true
		controller: 	a NECController
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#additionals->NECController>>#additionals #captu...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#('model' 'menuMorph' 'editor' 'context' 'inverseMapping' 'c...etc...
		organization: 	a ClassOrganization
		subclasses: 	{NECWorkspaceController. NOCController}
		name: 	#NECController
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'NECompletion-View'
		traitComposition: 	{}
		localSelectors: 	nil
		uniqueInstance: 	a NECController


ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
	Receiver: a ToolRegistry
	Arguments and temporary variables: 
		aBlock: 	[ self basicKeyStroke: evt ]
		aTextMorph: 	a TextMorphForEditView(740556800)
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		tools: 	an IdentityDictionary(#browser->PackageTreeNautilus #changeList->ChangeL...etc...


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(740556800)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (635@82)
		owner: 	a TransformMorph(866385920)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (635@82)
		color: 	NewColor black
		extension: 	a MorphExtension (783286272) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	NewColor black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'activateSubCommand: aCommandLinehandler
	[ aCommandLinehandle...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	NewColor black
		editView: 	a PluggableTextMorph(357040128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(740556800)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		view: 	a PluggableTextMorph(357040128)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (635@82)
		owner: 	a TransformMorph(866385920)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (635@82)
		color: 	NewColor black
		extension: 	a MorphExtension (783286272) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	NewColor black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'activateSubCommand: aCommandLinehandler
	[ aCommandLinehandle...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	NewColor black
		editView: 	a PluggableTextMorph(357040128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(740556800)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (635@82)
		owner: 	a TransformMorph(866385920)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (635@82)
		color: 	NewColor black
		extension: 	a MorphExtension (783286272) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	NewColor black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'activateSubCommand: aCommandLinehandler
	[ aCommandLinehandle...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	NewColor black
		editView: 	a PluggableTextMorph(357040128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(740556800)
	Receiver's instance variables: 
		timeStamp: 	33566
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(182.0@24.0)
		handler: 	nil
		wasHandled: 	false
		keyValue: 	100
		charCode: 	100
		scanCode: 	100


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(740556800)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (635@82)
		owner: 	a TransformMorph(866385920)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (635@82)
		color: 	NewColor black
		extension: 	a MorphExtension (783286272) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	NewColor black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'activateSubCommand: aCommandLinehandler
	[ aCommandLinehandle...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	NewColor black
		editView: 	a PluggableTextMorph(357040128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(740556800)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (635@82)
		owner: 	a TransformMorph(866385920)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (635@82)
		color: 	NewColor black
		extension: 	a MorphExtension (783286272) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	NewColor black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'activateSubCommand: aCommandLinehandler
	[ aCommandLinehandle...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	NewColor black
		editView: 	a PluggableTextMorph(357040128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(740556800)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(202@217) corner: (218@233)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(202@217) corner: (218@233)
		color: 	NewColor blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(740556800)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(210@226) mouseOver nil nil]
		targetOffset: 	(174.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 24161 209 226 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(66322432) an ImageMo...etc...
		fullBounds: 	(0@0) corner: (976@662)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(740556800)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(202@217) corner: (218@233)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(202@217) corner: (218@233)
		color: 	NewColor blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(740556800)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(210@226) mouseOver nil nil]
		targetOffset: 	(174.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 24161 209 226 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(740556800)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(202@217) corner: (218@233)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(202@217) corner: (218@233)
		color: 	NewColor blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(740556800)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(210@226) mouseOver nil nil]
		targetOffset: 	(174.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 24161 209 226 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(202@217) corner: (218@233)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(202@217) corner: (218@233)
		color: 	NewColor blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(740556800)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(210@226) mouseOver nil nil]
		targetOffset: 	(174.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 24161 209 226 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(202@217) corner: (218@233)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(202@217) corner: (218@233)
		color: 	NewColor blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(740556800)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(210@226) mouseOver nil nil]
		targetOffset: 	(174.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 24161 209 226 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		evtBuf: 	#(2 33566 100 0 8 100 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	(202@217) corner: (218@233)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(202@217) corner: (218@233)
		color: 	NewColor blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(740556800)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(210@226) mouseOver nil nil]
		targetOffset: 	(174.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 24161 209 226 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (976@662)
		canvas: 	a FormCanvas on: DisplayScreen(976x662x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(287571968))(a Spec...etc...
		lastStepTime: 	34730
		lastStepMessage: 	nil
		lastCycleTime: 	34730
		alarms: 	a Heap()
		lastAlarmTime: 	34730
		menuBuilder: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (976@662)
		canvas: 	a FormCanvas on: DisplayScreen(976x662x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(287571968))(a Spec...etc...
		lastStepTime: 	34730
		lastStepMessage: 	nil
		lastCycleTime: 	34730
		alarms: 	a Heap()
		lastAlarmTime: 	34730
		menuBuilder: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (976@662)
		canvas: 	a FormCanvas on: DisplayScreen(976x662x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(287571968))(a Spec...etc...
		lastStepTime: 	34730
		lastStepMessage: 	nil
		lastCycleTime: 	34730
		alarms: 	a Heap()
		lastAlarmTime: 	34730
		menuBuilder: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (976@662)
		canvas: 	a FormCanvas on: DisplayScreen(976x662x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(287571968))(a Spec...etc...
		lastStepTime: 	34730
		lastStepMessage: 	nil
		lastCycleTime: 	34730
		alarms: 	a Heap()
		lastAlarmTime: 	34730
		menuBuilder: 	nil



--- The full stack ---
PRCommandLineHandler(BasicCommandLineHandler)>>DoItIn:
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>doIt
SmalltalkEditor>>doIt:
SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
SmalltalkEditor(TextEditor)>>dispatchOn:
[ self dispatchOn: aKeyboardEvent ] in SmalltalkEditor(TextEditor)>>keystroke:
SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
SmalltalkEditor(TextEditor)>>keystroke:
[ editor keystroke: evt ] in TextMorphForEditView(TextMorph)>>basicKeyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>basicKeyStroke:
[ self basicKeyStroke: evt ] in TextMorphForEditView(TextMorph)>>keyStroke:
NECController class>>codeCompletionAround:textMorph:keyStroke:
ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Could not find option outputFile
22 February 2014 1:51:04.730546 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 Dec 26 2013
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 Dec 26 2013
https://github.com/pharo-project/pharo-vm.git Commit: e698e14f38003258fa49506b14307d83863a5ac1 Date: 2013-12-16 06:32:59 -0800 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14780

Image: Pharo3.0 [Latest update: #30778]

[ Error signal: 'Could not find option ' , aString ] in CommandLineArguments>>optionAt:
	Receiver: a CommandLineArguments
	Arguments and temporary variables: 
		aString: 	'outputFile'
	Receiver's instance variables: 
		arguments: 	an OrderedCollection('--baseDirectory=/home/astares/hitchhikersGuide...etc...


OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection('--baseDirectory=/home/astares/hitchhikersGuideToPharo/HitchhikersGui...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :arg | arg beginsWith: optionStart ]
		foundBlock: 	[ :option | (option splitOn: '=') second ]
		exceptionBlock: 	[ Error signal: 'Could not find option ' , aString ]
	Receiver's instance variables: 
		array: 	#('--baseDirectory=/home/astares/hitchhikersGuideToPharo/HitchhikersGuid...etc...
		firstIndex: 	1
		lastIndex: 	2


CommandLineArguments>>longOptionAt:ifAbsent:
	Receiver: a CommandLineArguments
	Arguments and temporary variables: 
		aString: 	'outputFile'
		absentBlock: 	[ Error signal: 'Could not find option ' , aString ]
		optionStart: 	'--outputFile='
	Receiver's instance variables: 
		arguments: 	an OrderedCollection('--baseDirectory=/home/astares/hitchhikersGuide...etc...


CommandLineArguments>>optionAt:ifAbsent:
	Receiver: a CommandLineArguments
	Arguments and temporary variables: 
		aString: 	'outputFile'
		absentBlock: 	[ Error signal: 'Could not find option ' , aString ]
	Receiver's instance variables: 
		arguments: 	an OrderedCollection('--baseDirectory=/home/astares/hitchhikersGuide...etc...


CommandLineArguments>>optionAt:
	Receiver: a CommandLineArguments
	Arguments and temporary variables: 
		aString: 	'outputFile'
	Receiver's instance variables: 
		arguments: 	an OrderedCollection('--baseDirectory=/home/astares/hitchhikersGuide...etc...


PRExportCommandLineHandler(CommandLineHandler)>>optionAt:
	Receiver: a PRExportCommandLineHandler
	Arguments and temporary variables: 
		aString: 	'outputFile'
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a Session
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver
		baseDirectory: 	File @ /home/astares/hitchhikersGuideToPharo/HitchhikersGuideToP...etc...
		configuration: 	a PRExportConfiguration[876609536]
		subconfName: 	'LaTeX whole book'


PRExportCommandLineHandler>>DoItIn:
	Receiver: a PRExportCommandLineHandler
	Arguments and temporary variables: 
		ThisContext: 	PRExportCommandLineHandler>>activate
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a Session
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver
		baseDirectory: 	File @ /home/astares/hitchhikersGuideToPharo/HitchhikersGuideToP...etc...
		configuration: 	a PRExportConfiguration[876609536]
		subconfName: 	'LaTeX whole book'


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'self optionAt: ''outputFile'''
		itsSelection: 	a Text for 'self optionAt: ''outputFile'''
		itsSelectionString: 	'self optionAt: ''outputFile'''
	Receiver's instance variables: 
		ast: 	DoItIn: ThisContext
	^ self optionAt: 'outputFile'
		source: 	a ReadStream
		context: 	PRExportCommandLineHandler>>activate
		receiver: 	a PRExportCommandLineHandler
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result inspect ]
		result: 	nil
		rcvr: 	a PRExportCommandLineHandler
		ctxt: 	PRExportCommandLineHandler>>activate
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1035206656)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>inspectIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1035206656)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>inspectIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1035206656)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-i>']
		aBoolean: 	false
		return: 	[ :val | ^ val ]
		asciiValue: 	106
		actions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop: #...etc...
		action: 	#inspectIt:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1035206656)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-i>']
		return: 	[ :val | ^ val ]
		asciiValue: 	105
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1035206656)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-i>']
		char: 	nil
		return: 	[ :val | ^ val ]
		keyEvents: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1035206656)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


[ self dispatchOn: aKeyboardEvent ] in SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1035206656)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ self dispatchOn: aKeyboardEvent ]
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1035206656)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		anAction: 	[ self dispatchOn: aKeyboardEvent ]
		aKeyboardEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1035206656)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1035206656)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


[ editor keystroke: evt ] in TextMorphForEditView(TextMorph)>>basicKeyStroke:
	Receiver: a TextMorphForEditView(1035206656)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (635@114)
		owner: 	a TransformMorph(1071906816)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (635@114)
		color: 	NewColor black
		extension: 	a MorphExtension (1071906816) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	NewColor black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'activate
	super activate.
	subconfName isEmptyOrNil ifTrue: [...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(1003225088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(1035206656)
	Arguments and temporary variables: 
		interactionBlock: 	[ editor keystroke: evt ]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a Paragraph
		oldText: 	a Text for 'activate
	super activate.
	subconfName isEmptyOrNil ifTrue...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (635@114)
		owner: 	a TransformMorph(1071906816)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (635@114)
		color: 	NewColor black
		extension: 	a MorphExtension (1071906816) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	NewColor black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'activate
	super activate.
	subconfName isEmptyOrNil ifTrue: [...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(1003225088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(1035206656)
	Arguments and temporary variables: 
		interActionBlock: 	[ editor keystroke: evt ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (635@114)
		owner: 	a TransformMorph(1071906816)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (635@114)
		color: 	NewColor black
		extension: 	a MorphExtension (1071906816) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	NewColor black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'activate
	super activate.
	subconfName isEmptyOrNil ifTrue: [...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(1003225088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>basicKeyStroke:
	Receiver: a TextMorphForEditView(1035206656)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (635@114)
		owner: 	a TransformMorph(1071906816)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (635@114)
		color: 	NewColor black
		extension: 	a MorphExtension (1071906816) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	NewColor black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'activate
	super activate.
	subconfName isEmptyOrNil ifTrue: [...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(1003225088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ self basicKeyStroke: evt ] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1035206656)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (635@114)
		owner: 	a TransformMorph(1071906816)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (635@114)
		color: 	NewColor black
		extension: 	a MorphExtension (1071906816) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	NewColor black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'activate
	super activate.
	subconfName isEmptyOrNil ifTrue: [...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(1003225088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


NECController class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: NECController
	Arguments and temporary variables: 
		aBlock: 	[ self basicKeyStroke: evt ]
		aTextMorph: 	a TextMorphForEditView(1035206656)
		evt: 	[keystroke '<Cmd-i>']
		editor: 	a SmalltalkEditor
		stringHolder: 	a MorphicTextAdapter
		completionAllowed: 	true
		controller: 	a NECController
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#additionals->NECController>>#additionals #captu...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#('model' 'menuMorph' 'editor' 'context' 'inverseMapping' 'c...etc...
		organization: 	a ClassOrganization
		subclasses: 	{NECWorkspaceController. NOCController}
		name: 	#NECController
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'NECompletion-View'
		traitComposition: 	{}
		localSelectors: 	nil
		uniqueInstance: 	a NECController


ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
	Receiver: a ToolRegistry
	Arguments and temporary variables: 
		aBlock: 	[ self basicKeyStroke: evt ]
		aTextMorph: 	a TextMorphForEditView(1035206656)
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		tools: 	an IdentityDictionary(#browser->PackageTreeNautilus #changeList->ChangeL...etc...


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1035206656)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (635@114)
		owner: 	a TransformMorph(1071906816)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (635@114)
		color: 	NewColor black
		extension: 	a MorphExtension (1071906816) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	NewColor black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'activate
	super activate.
	subconfName isEmptyOrNil ifTrue: [...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(1003225088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(1035206656)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
		view: 	a PluggableTextMorph(1003225088)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (635@114)
		owner: 	a TransformMorph(1071906816)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (635@114)
		color: 	NewColor black
		extension: 	a MorphExtension (1071906816) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	NewColor black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'activate
	super activate.
	subconfName isEmptyOrNil ifTrue: [...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(1003225088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(1035206656)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-i>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (635@114)
		owner: 	a TransformMorph(1071906816)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (635@114)
		color: 	NewColor black
		extension: 	a MorphExtension (1071906816) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	NewColor black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'activate
	super activate.
	subconfName isEmptyOrNil ifTrue: [...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(1003225088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-i>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(1035206656)
	Receiver's instance variables: 
		timeStamp: 	109834
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(160.0@50.0)
		handler: 	nil
		wasHandled: 	false
		keyValue: 	105
		charCode: 	105
		scanCode: 	105


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(1035206656)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (635@114)
		owner: 	a TransformMorph(1071906816)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (635@114)
		color: 	NewColor black
		extension: 	a MorphExtension (1071906816) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	NewColor black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'activate
	super activate.
	subconfName isEmptyOrNil ifTrue: [...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(1003225088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(1035206656)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (635@114)
		owner: 	a TransformMorph(1071906816)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (635@114)
		color: 	NewColor black
		extension: 	a MorphExtension (1071906816) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	NewColor black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'activate
	super activate.
	subconfName isEmptyOrNil ifTrue: [...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(1003225088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-i>']
		focusHolder: 	a TextMorphForEditView(1035206656)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(200@263) corner: (216@279)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(200@263) corner: (216@279)
		color: 	NewColor blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(1035206656)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(208@272) mouseOver nil nil]
		targetOffset: 	(21.0@55.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 108760 209 274 0 0 0 1)
		lastKeyScanCode: 	105
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(322437120) a SpecWin...etc...
		fullBounds: 	(0@0) corner: (976@662)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke '<Cmd-i>']
		focusHolder: 	a TextMorphForEditView(1035206656)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(200@263) corner: (216@279)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(200@263) corner: (216@279)
		color: 	NewColor blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(1035206656)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(208@272) mouseOver nil nil]
		targetOffset: 	(21.0@55.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 108760 209 274 0 0 0 1)
		lastKeyScanCode: 	105
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-i>']
		focusHolder: 	a TextMorphForEditView(1035206656)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(200@263) corner: (216@279)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(200@263) corner: (216@279)
		color: 	NewColor blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(1035206656)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(208@272) mouseOver nil nil]
		targetOffset: 	(21.0@55.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 108760 209 274 0 0 0 1)
		lastKeyScanCode: 	105
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(200@263) corner: (216@279)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(200@263) corner: (216@279)
		color: 	NewColor blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(1035206656)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(208@272) mouseOver nil nil]
		targetOffset: 	(21.0@55.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 108760 209 274 0 0 0 1)
		lastKeyScanCode: 	105
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-i>']
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(200@263) corner: (216@279)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(200@263) corner: (216@279)
		color: 	NewColor blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(1035206656)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(208@272) mouseOver nil nil]
		targetOffset: 	(21.0@55.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 108760 209 274 0 0 0 1)
		lastKeyScanCode: 	105
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
		evtBuf: 	#(2 109834 105 0 8 105 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	(200@263) corner: (216@279)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(200@263) corner: (216@279)
		color: 	NewColor blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(1035206656)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(208@272) mouseOver nil nil]
		targetOffset: 	(21.0@55.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 108760 209 274 0 0 0 1)
		lastKeyScanCode: 	105
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8



--- The full stack ---
[ Error signal: 'Could not find option ' , aString ] in CommandLineArguments>>optionAt:
OrderedCollection(Collection)>>detect:ifFound:ifNone:
CommandLineArguments>>longOptionAt:ifAbsent:
CommandLineArguments>>optionAt:ifAbsent:
CommandLineArguments>>optionAt:
PRExportCommandLineHandler(CommandLineHandler)>>optionAt:
PRExportCommandLineHandler>>DoItIn:
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>inspectIt
SmalltalkEditor>>inspectIt:
SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
SmalltalkEditor(TextEditor)>>dispatchOn:
[ self dispatchOn: aKeyboardEvent ] in SmalltalkEditor(TextEditor)>>keystroke:
SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
SmalltalkEditor(TextEditor)>>keystroke:
[ editor keystroke: evt ] in TextMorphForEditView(TextMorph)>>basicKeyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>basicKeyStroke:
[ self basicKeyStroke: evt ] in TextMorphForEditView(TextMorph)>>keyStroke:
NECController class>>codeCompletionAround:textMorph:keyStroke:
ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
22 February 2014 1:52:06.278511 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 Dec 26 2013
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 Dec 26 2013
https://github.com/pharo-project/pharo-vm.git Commit: e698e14f38003258fa49506b14307d83863a5ac1 Date: 2013-12-16 06:32:59 -0800 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14780

Image: Pharo3.0 [Latest update: #30778]

PRExportCommandLineHandler>>DoItIn:
	Receiver: a PRExportCommandLineHandler
	Arguments and temporary variables: 
		ThisContext: 	PRExportCommandLineHandler>>activate
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a Session
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver
		baseDirectory: 	File @ /home/astares/hitchhikersGuideToPharo/HitchhikersGuideToP...etc...
		configuration: 	a PRExportConfiguration[876609536]
		subconfName: 	'LaTeX whole book'


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'	self halt parseInputFiles.'
		itsSelection: 	a Text for '	self halt parseInputFiles.'
		itsSelectionString: 	'	self halt parseInputFiles.'
	Receiver's instance variables: 
		ast: 	DoItIn: ThisContext
	^ self halt parseInputFiles
		source: 	a ReadStream
		context: 	PRExportCommandLineHandler>>activate
		receiver: 	a PRExportCommandLineHandler
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	a PRExportCommandLineHandler
		ctxt: 	PRExportCommandLineHandler>>activate
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1035206656)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1035206656)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1035206656)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1035206656)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		aBoolean: 	false
		return: 	[ :val | ^ val ]
		asciiValue: 	101
		actions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop: #...etc...
		action: 	#doIt:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1035206656)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		return: 	[ :val | ^ val ]
		asciiValue: 	100
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1035206656)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		char: 	nil
		return: 	[ :val | ^ val ]
		keyEvents: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1035206656)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


[ self dispatchOn: aKeyboardEvent ] in SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1035206656)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ self dispatchOn: aKeyboardEvent ]
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1035206656)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		anAction: 	[ self dispatchOn: aKeyboardEvent ]
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1035206656)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1035206656)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


[ editor keystroke: evt ] in TextMorphForEditView(TextMorph)>>basicKeyStroke:
	Receiver: a TextMorphForEditView(1035206656)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (635@114)
		owner: 	a TransformMorph(1071906816)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (635@114)
		color: 	NewColor black
		extension: 	a MorphExtension (1071906816) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	NewColor black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'activate
	super activate.
	subconfName isEmptyOrNil ifTrue: [...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(1003225088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(1035206656)
	Arguments and temporary variables: 
		interactionBlock: 	[ editor keystroke: evt ]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a Paragraph
		oldText: 	a Text for 'activate
	super activate.
	subconfName isEmptyOrNil ifTrue...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (635@114)
		owner: 	a TransformMorph(1071906816)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (635@114)
		color: 	NewColor black
		extension: 	a MorphExtension (1071906816) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	NewColor black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'activate
	super activate.
	subconfName isEmptyOrNil ifTrue: [...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(1003225088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(1035206656)
	Arguments and temporary variables: 
		interActionBlock: 	[ editor keystroke: evt ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (635@114)
		owner: 	a TransformMorph(1071906816)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (635@114)
		color: 	NewColor black
		extension: 	a MorphExtension (1071906816) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	NewColor black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'activate
	super activate.
	subconfName isEmptyOrNil ifTrue: [...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(1003225088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>basicKeyStroke:
	Receiver: a TextMorphForEditView(1035206656)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (635@114)
		owner: 	a TransformMorph(1071906816)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (635@114)
		color: 	NewColor black
		extension: 	a MorphExtension (1071906816) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	NewColor black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'activate
	super activate.
	subconfName isEmptyOrNil ifTrue: [...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(1003225088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ self basicKeyStroke: evt ] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1035206656)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (635@114)
		owner: 	a TransformMorph(1071906816)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (635@114)
		color: 	NewColor black
		extension: 	a MorphExtension (1071906816) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	NewColor black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'activate
	super activate.
	subconfName isEmptyOrNil ifTrue: [...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(1003225088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


NECController class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: NECController
	Arguments and temporary variables: 
		aBlock: 	[ self basicKeyStroke: evt ]
		aTextMorph: 	a TextMorphForEditView(1035206656)
		evt: 	[keystroke '<Cmd-d>']
		editor: 	a SmalltalkEditor
		stringHolder: 	a MorphicTextAdapter
		completionAllowed: 	true
		controller: 	a NECController
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#additionals->NECController>>#additionals #captu...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#('model' 'menuMorph' 'editor' 'context' 'inverseMapping' 'c...etc...
		organization: 	a ClassOrganization
		subclasses: 	{NECWorkspaceController. NOCController}
		name: 	#NECController
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'NECompletion-View'
		traitComposition: 	{}
		localSelectors: 	nil
		uniqueInstance: 	a NECController


ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
	Receiver: a ToolRegistry
	Arguments and temporary variables: 
		aBlock: 	[ self basicKeyStroke: evt ]
		aTextMorph: 	a TextMorphForEditView(1035206656)
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		tools: 	an IdentityDictionary(#browser->PackageTreeNautilus #changeList->ChangeL...etc...


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1035206656)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (635@114)
		owner: 	a TransformMorph(1071906816)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (635@114)
		color: 	NewColor black
		extension: 	a MorphExtension (1071906816) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	NewColor black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'activate
	super activate.
	subconfName isEmptyOrNil ifTrue: [...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(1003225088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(1035206656)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		view: 	a PluggableTextMorph(1003225088)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (635@114)
		owner: 	a TransformMorph(1071906816)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (635@114)
		color: 	NewColor black
		extension: 	a MorphExtension (1071906816) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	NewColor black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'activate
	super activate.
	subconfName isEmptyOrNil ifTrue: [...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(1003225088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(1035206656)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (635@114)
		owner: 	a TransformMorph(1071906816)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (635@114)
		color: 	NewColor black
		extension: 	a MorphExtension (1071906816) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	NewColor black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'activate
	super activate.
	subconfName isEmptyOrNil ifTrue: [...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(1003225088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(1035206656)
	Receiver's instance variables: 
		timeStamp: 	171406
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(96@69)
		handler: 	nil
		wasHandled: 	false
		keyValue: 	100
		charCode: 	100
		scanCode: 	100


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(1035206656)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (635@114)
		owner: 	a TransformMorph(1071906816)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (635@114)
		color: 	NewColor black
		extension: 	a MorphExtension (1071906816) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	NewColor black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'activate
	super activate.
	subconfName isEmptyOrNil ifTrue: [...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(1003225088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(1035206656)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (635@114)
		owner: 	a TransformMorph(1071906816)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (635@114)
		color: 	NewColor black
		extension: 	a MorphExtension (1071906816) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	NewColor black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'activate
	super activate.
	subconfName isEmptyOrNil ifTrue: [...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(1003225088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(1035206656)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(136@282) corner: (152@298)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(136@282) corner: (152@298)
		color: 	NewColor blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(1035206656)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(144@291) mouseOver nil nil]
		targetOffset: 	(53@77)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 168441 144 291 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(322437120) a SpecWin...etc...
		fullBounds: 	(0@0) corner: (976@662)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(1035206656)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(136@282) corner: (152@298)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(136@282) corner: (152@298)
		color: 	NewColor blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(1035206656)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(144@291) mouseOver nil nil]
		targetOffset: 	(53@77)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 168441 144 291 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(1035206656)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(136@282) corner: (152@298)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(136@282) corner: (152@298)
		color: 	NewColor blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(1035206656)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(144@291) mouseOver nil nil]
		targetOffset: 	(53@77)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 168441 144 291 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(136@282) corner: (152@298)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(136@282) corner: (152@298)
		color: 	NewColor blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(1035206656)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(144@291) mouseOver nil nil]
		targetOffset: 	(53@77)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 168441 144 291 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(136@282) corner: (152@298)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(136@282) corner: (152@298)
		color: 	NewColor blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(1035206656)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(144@291) mouseOver nil nil]
		targetOffset: 	(53@77)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 168441 144 291 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		evtBuf: 	#(2 171406 100 0 8 100 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	(136@282) corner: (152@298)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(136@282) corner: (152@298)
		color: 	NewColor blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(1035206656)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(144@291) mouseOver nil nil]
		targetOffset: 	(53@77)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 168441 144 291 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (976@662)
		canvas: 	a FormCanvas on: DisplayScreen(976x662x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(287571968))(a Spec...etc...
		lastStepTime: 	172157
		lastStepMessage: 	nil
		lastCycleTime: 	172157
		alarms: 	a Heap()
		lastAlarmTime: 	172157
		menuBuilder: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (976@662)
		canvas: 	a FormCanvas on: DisplayScreen(976x662x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(287571968))(a Spec...etc...
		lastStepTime: 	172157
		lastStepMessage: 	nil
		lastCycleTime: 	172157
		alarms: 	a Heap()
		lastAlarmTime: 	172157
		menuBuilder: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (976@662)
		canvas: 	a FormCanvas on: DisplayScreen(976x662x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(287571968))(a Spec...etc...
		lastStepTime: 	172157
		lastStepMessage: 	nil
		lastCycleTime: 	172157
		alarms: 	a Heap()
		lastAlarmTime: 	172157
		menuBuilder: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (976@662)
		canvas: 	a FormCanvas on: DisplayScreen(976x662x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(287571968))(a Spec...etc...
		lastStepTime: 	172157
		lastStepMessage: 	nil
		lastCycleTime: 	172157
		alarms: 	a Heap()
		lastAlarmTime: 	172157
		menuBuilder: 	nil



--- The full stack ---
PRExportCommandLineHandler>>DoItIn:
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>doIt
SmalltalkEditor>>doIt:
SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
SmalltalkEditor(TextEditor)>>dispatchOn:
[ self dispatchOn: aKeyboardEvent ] in SmalltalkEditor(TextEditor)>>keystroke:
SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
SmalltalkEditor(TextEditor)>>keystroke:
[ editor keystroke: evt ] in TextMorphForEditView(TextMorph)>>basicKeyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>basicKeyStroke:
[ self basicKeyStroke: evt ] in TextMorphForEditView(TextMorph)>>keyStroke:
NECController class>>codeCompletionAround:textMorph:keyStroke:
ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

